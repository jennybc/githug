% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_stage-add.R
\name{git_stage}
\alias{git_add}
\alias{git_stage}
\title{Stage changes for the next commit.}
\usage{
git_stage(..., all = FALSE, force = FALSE, repo = ".")

git_add(..., all = FALSE, force = FALSE, repo = ".")
}
\arguments{
\item{...}{One or more paths or shell glob patterns that will be matched
against files in the repo's working directory. Paths that match will be
added to the set of changes staged for the next commit.}

\item{all}{Logical, consulted if no paths are given. If \code{TRUE},
pre-authorizes the staging of all new files, file deletions, and file
modifications. Emulates \code{git add -A}, which is equivalent to \code{git
add .; git add -u}.}

\item{force}{Logical, defaults to \code{FALSE}. Value \code{TRUE} is required
if any of the to-be-staged paths are currently ignored.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
nothing
}
\description{
Stage changes to files in preparation for a commit. \code{git_add()} and
\code{git_stage()} are aliases for each other, so you can use what feels most
natural, i.e. "add" a file to the repo and "stage" modifications. These are
convenience wrappers around \code{\link[git2r:add]{git2r::add}()}.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "max.txt")
write("You get what you settle for.", "louise.txt")
git_status()
## try this interactively and accept the proposed auto-staging
#git_add()
git_add("max.txt", "louise.txt")
git_status()
write("If done properly armed robbery doesn't have to be a totally unpleasant experience.",
      "jd.txt")
write("Is he your husband or your father?", "louise.txt", append = TRUE)
git_status()
git_stage(all = TRUE)
git_status()
git_commit(message = "Brains'll only get you so far and luck always runs out.")
git_status()
setwd(owd)
}

