% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_branch_checkout.R
\name{githug-switch}
\alias{git_branch_checkout}
\alias{git_switch}
\alias{githug-switch}
\title{Switch to another branch}
\usage{
git_switch(name = "master", create = NA, repo = ".")

git_branch_checkout(name = "master", create = FALSE, force = FALSE,
  repo = ".")
}
\arguments{
\item{name}{Name of the branch}

\item{create}{Whether to create the branch if it does not exist yet}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}

\item{force}{Whether to overwrite current files with the versions in branch
\code{name}, even if this means discarding uncommited changes. Default is
\code{FALSE}.}
}
\description{
Switch to or "checkout" another branch. Optionally, create the branch if it
doesn't exist yet and then check it out. If you currently have uncommitted
changes, it is possible to lose those changes when you switch to another
branch. \code{git_switch()} will never let that happen. If that's really what
you want, call the lower-level function \code{git_branch_checkout(..., force
= TRUE)}.
}
\details{
Convenience wrappers around \code{\link{git2r}}'s
\code{\link[git2r]{checkout,git_branch-method}}.
}
\section{git_switch}{


  Designed for interactive use. Request a branch by \code{name} or, by
  default, switch to \code{master}. If the branch doesn't exist yet, you'll
  get an offer to create it and immediately check it out.

  \code{git_switch()} will not let you switch branches if you have
  uncommitted changes that would be lost. You should either:

  \enumerate{
  \item Commit or stash these changes. Then call \code{git_switch()} again.
  \item Use \code{git_branch_checkout()} directly, with \code{force =  TRUE},
  if you are willing to lose these changes.
  }
}

\section{git_branch_checkout}{


  Designed for non-interactive use. If the branch doesn't exist yet, you'll
  have to explicitly authorize its creation via \code{create = TRUE}.
  \code{force = TRUE} will checkout branch \code{name} even if it means
  losing uncommitted changes. In the future, githug will make a branch and a
  commit or a stash behind the scenes here, in case you later have regrets.
}
\examples{
repo <- git_init(tempfile("githug-branches-"))
owd <- setwd(repo)

## first commit
writeLines("Well, we're not in the middle of nowhere...", "nowhere.txt")
git_commit("nowhere.txt", message = "1: not in the middle of nowhere")
git_branch_list()

\dontrun{
## in an interactive session, try this to checkout and create at once
git_switch("louise")
}

git_branch_checkout("louise", create = TRUE)
git_branch_current()

setwd(owd)
}

