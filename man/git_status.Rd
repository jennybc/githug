% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_status.R
\name{git_status}
\alias{git_status}
\title{Get status of a Git repo}
\usage{
git_status(repo = ".", ls = FALSE)
}
\arguments{
\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}

\item{ls}{Logical, indicating whether to include unchanged, tracked files
and gitignored files. Default is \code{FALSE}.}
}
\value{
a data frame where each row describes changes to a path, invisibly
}
\description{
The status of a Git repo is a set of paths, typically broken down like so:
\describe{
\item{Staged changes}{Paths with modifications that are staged for inclusion
in the next commit.}
\item{Unstaged changes}{Paths that are tracked by Git but that have unstaged
modifications.}
\item{Untracked files}{Paths that are not yet tracked by Git but that are
also not gitignored.}
}
What does that leave? Two kinds of paths
\itemize{
\item Unchanged, tracked files.
\item Ignored files.
}
Use \code{ls = TRUE} to request a status that includes these paths as well,
i.e. a complete census of all the files in the repo.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Add me", "add-me")
write("Don't add me", "dont-add-me")
git_status()
git_add("add-me")
git_status()
git_commit(message = "first commit")
git_status()
git_status(ls = TRUE)
setwd(owd)
}

