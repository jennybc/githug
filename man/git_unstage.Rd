% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_unstage.R
\name{git_unstage}
\alias{git_unstage}
\title{Unstage changes for the next commit.}
\usage{
git_unstage(..., all = FALSE, repo = ".")
}
\arguments{
\item{...}{One or more paths that will be matched against files with changes
that are staged for the next commit. Paths that match will be unstaged,
i.e. their changes will not be part of the next commit.}

\item{all}{Logical, consulted if no paths are given. If \code{TRUE},
pre-authorizes the unstaging of all staged files.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
nothing
}
\description{
Remove file modifications from the staging area for the next commit, BUT
LEAVE YOUR FILES ALONE. This function is "working directory safe". It will
not change your files. It only unstages them. When might you use this? If you
decide you'd like to exclude certain changes that are present in your working
directory from the next commit. In terms of command line Git, this is
\code{git reset <paths>}, which is the opposite of \code{git add <paths>}.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "max.txt")
git_commit(all = TRUE, message = "first commit")
write("You get what you settle for.", "louise.txt")
git_status()
git_add("louise.txt")
git_status()
git_unstage("louise.txt")
git_status()
setwd(owd)
}

